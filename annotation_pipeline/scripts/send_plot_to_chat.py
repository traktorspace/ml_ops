# annotation_pipeline/scripts/send_to_chat.py
#
# Usage examples
# --------------
# 1) Default (cube + cloud-mask preview of one directory)
#    python3 send_to_chat.py -dotenv=/path/config.env -imgpath=/data/prod_X
#
# 2) One specific product (cube + mask + overlay)
#    python3 send_to_chat.py -dotenv=/path/config.env -imgpath=/data_root \
#        -prodname=hyperfield1a_L1B_20250608T073649
#
# 3) List of products (cube + mask + overlay, one name per line)
#    python3 send_to_chat.py -dotenv=/path/config.env -imgpath=/data_root \
#        -prodlist=products.txt
#
# 4) Annotation-only for every product in a folder
#    python3 send_to_chat.py -dotenv=/path/config.env -imgpath=/dump_dataset \
#        -annotation_only
#
# 5) Annotation-only for a specific product
#    python3 send_to_chat.py -dotenv=/path/config.env -imgpath=/dump_dataset \
#        -prodname=hyperfield1a_L1B_20250607T190044 -annoonly
import argparse
import random
import traceback
from pathlib import Path

import matplotlib

matplotlib.use('Agg')  # head-less backend

from dotenv import dotenv_values
from loguru import logger

from annotation_pipeline.utils.path_utils import fetch_data_pair
from annotation_pipeline.utils.slack_utils import (
    post_new_message_and_get_thread_id,
    upload_file_to_channel,
)
from annotation_pipeline.utils.viz_utils import (
    build_annotation_preview,
    build_cube_and_mask_preview,
)


# --------------------------------------------------------------------------- #
# Helpers                                                                     #
# --------------------------------------------------------------------------- #
def push_lookup_preview(
    img_path: Path,
    slack_token: str,
    channel_id: str,
    dpi: int = 300,
) -> None:
    """
    Send the standard [cube + cloud-mask] preview (legacy lookup) to Slack.
    """
    logger.info(f'Building classic cloud-mask preview for directory {img_path}')

    buf = build_cube_and_mask_preview(
        cube_path=img_path / 'L1B.tif',
        mask_path=img_path / 'cloud_mask.tif',
        mask_plot_title='Cloud mask generated by pipeline',
        dpi=dpi,
    )

    slack_msg = (
        f'🧚 Requested pair cube+annotation for product: `{img_path.name}`\n'
        f'🛣️ Full path: `{img_path.as_posix()}`\n'
        f'🚨 *Note:* The cloud mask has been obtained from the pipeline!'
    )
    upload_file_to_channel(
        buffer=buf,
        filename='plot.png',
        token=slack_token,
        channel_id=channel_id,
        title=img_path.name,
        initial_comment=slack_msg,
        thread_ts=None,
    )


def push_product_preview(
    prod_name: str,
    root_dir: Path,
    slack_token: str,
    channel_id: str,
    overlay_alpha: float = 0.5,
    dpi: int = 300,
    thread_ts: str | None = None,
) -> None:
    """
    Send a [cube, annotation, overlay] preview for one product.
    """
    cube_path, annotation_path = fetch_data_pair(
        root_dir=root_dir, prod_name=prod_name
    )

    logger.info(f'Building preview for product {prod_name}')
    buf = build_cube_and_mask_preview(
        cube_path=Path(cube_path),
        mask_path=annotation_path,
        overlay_alpha=overlay_alpha,
        dpi=dpi,
    )

    upload_file_to_channel(
        buffer=buf,
        filename='plot.png',
        token=slack_token,
        channel_id=channel_id,
        title=prod_name,
        initial_comment=(
            f'Cube, Mask, Overlay for product `{prod_name}`\n'
            f'Location: *{root_dir}*'
        ),
        thread_ts=thread_ts,
    )


def push_annotation_preview(
    prod_name: str,
    root_dir: Path,
    slack_token: str,
    channel_id: str,
    dpi: int = 300,
    thread_ts: str | None = None,
) -> None:
    """
    Send a *mask-only* preview for one product.
    The annotation is expected at: root_dir / prod_name / 'L1B_annotation.tif'
    """
    annotation_path = root_dir / prod_name / 'L1B_annotation.tif'
    if not annotation_path.exists():
        raise FileNotFoundError(f'Annotation not found: {annotation_path}')

    logger.info(f'Building annotation-only preview for {prod_name}')
    buf = build_annotation_preview(mask_path=annotation_path, dpi=dpi)

    upload_file_to_channel(
        buffer=buf,
        filename='annotation.png',
        token=slack_token,
        channel_id=channel_id,
        title=f'{prod_name} - annotation',
        initial_comment=(
            f'Annotation preview for product `{prod_name}`\n'
            f'Location: *{annotation_path.as_posix()}*'
        ),
        thread_ts=thread_ts,
    )


# --------------------------------------------------------------------------- #
# Main                                                                        #
# --------------------------------------------------------------------------- #
def main() -> None:
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-dotenv', type=Path, required=True)
        parser.add_argument(
            '-imgpath',
            type=Path,
            required=True,
            help='Root path where your cubes / annotations are stored',
        )
        parser.add_argument(
            '-prodname',
            type=str,
            required=False,
            help='Single product name, e.g. hyperfield1a_L1B_20250902T230929',
        )
        parser.add_argument(
            '-prodlist',
            type=Path,
            required=False,
            help='Txt file with a list of product names (one per line)',
        )
        parser.add_argument(
            '-annotation_only',
            '-annoonly',
            action='store_true',
            help='Send ONLY annotation previews (expects L1B_annotation.tif '
            'in each product dir)',
        )
        args = parser.parse_args()

        # ------------------------------------------------------------------ #
        # Sanity checks                                                       #
        # ------------------------------------------------------------------ #
        if not args.dotenv.exists():
            raise FileNotFoundError('Dotenv file not found')
        if not args.imgpath.exists():
            raise FileNotFoundError('Img path not found')

        env = dotenv_values(args.dotenv)
        slack_token = str(env['SLACK_OAUTH'])
        slack_channel_id = str(env['SLACK_CHANNEL'])

        # ------------------------------------------------------------------ #
        # Case 1 – classic lookup (cube + pipeline cloud mask)               #
        # ------------------------------------------------------------------ #
        if (
            args.prodname is None
            and args.prodlist is None
            and not args.annotation_only
        ):
            push_lookup_preview(
                img_path=args.imgpath,
                slack_token=slack_token,
                channel_id=slack_channel_id,
            )
            logger.success('Upload completed!')
            return

        # ------------------------------------------------------------------ #
        # Build the list of products to render                               #
        # ------------------------------------------------------------------ #
        if args.prodlist is not None:
            if not args.prodlist.exists():
                raise FileNotFoundError(
                    f'Product-list file {args.prodlist} not found'
                )
            prods = [
                p for p in args.prodlist.read_text().splitlines() if p.strip()
            ]
        elif args.prodname is not None:
            prods = [args.prodname]
        else:  # no prodname / prodlist specified
            if args.annotation_only:
                prods = [
                    p.name
                    for p in args.imgpath.iterdir()
                    if (p / 'L1B_annotation.tif').exists()
                ]
            else:
                prods = [
                    random.choice([p.name for p in args.imgpath.iterdir()])
                ]

        if not prods:
            logger.warning('No products found – nothing to send')
            return

        # ------------------------------------------------------------------ #
        # Parent message (Slack thread)                                      #
        # ------------------------------------------------------------------ #
        header_text = (
            f'Requested *annotation-only* preview for {len(prods)} product'
            f'{"s" if len(prods) > 1 else ""}. Images below 👇'
            if args.annotation_only
            else f'Requested [Cube, Mask, Overlay] for {len(prods)} product'
            f'{"s" if len(prods) > 1 else ""}. Images below 👇'
        )

        thread_ts = post_new_message_and_get_thread_id(
            text=header_text,
            slack_bot_token=slack_token,
            channel_id=slack_channel_id,
        )

        # ------------------------------------------------------------------ #
        # Iterate through products                                           #
        # ------------------------------------------------------------------ #
        for prod in prods:
            if args.annotation_only:
                push_annotation_preview(
                    prod_name=prod,
                    root_dir=args.imgpath,
                    slack_token=slack_token,
                    channel_id=slack_channel_id,
                    thread_ts=thread_ts,
                )
            else:
                push_product_preview(
                    prod_name=prod,
                    root_dir=args.imgpath,
                    slack_token=slack_token,
                    channel_id=slack_channel_id,
                    thread_ts=thread_ts,
                )

        logger.success('Upload completed!')

    except Exception:
        logger.exception(traceback.format_exc())


if __name__ == '__main__':
    main()
