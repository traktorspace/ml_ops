import argparse
import traceback
from pathlib import Path

from dotenv import dotenv_values
from loguru import logger

from data_pipeline.utils.slack_utils import (
    upload_file_to_channel,
)
from data_pipeline.utils.viz_utils import build_cube_and_mask_preview


def main():
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-dotenv', type=Path, required=True)
        parser.add_argument('-imgpath', type=Path, required=True)
        args = parser.parse_args()

        if not args.dotenv.exists():
            raise FileNotFoundError('Dotenv file not found')

        imgpath = args.imgpath
        if not args.imgpath.exists():
            raise FileNotFoundError('Img path not found')

        env = dotenv_values(args.dotenv)

        buf = build_cube_and_mask_preview(
            cube_path=imgpath / 'L1B.tif',
            mask_path=imgpath / 'cloud_mask.tif',
            mask_plot_title='Cloud mask generated by pipeline',
            dpi=300,
        )
        upload_file_to_channel(
            buffer=buf,
            filename='plot.png',
            token=str(env['SLACK_OAUTH']),
            channel_id=str(env['SLACK_CHANNEL']),
            title=args.imgpath.name,
            initial_comment=(f'{imgpath}'),
            thread_ts=None,
        )

    except Exception:
        logger.exception(traceback.format_exc())


if __name__ == '__main__':
    main()
